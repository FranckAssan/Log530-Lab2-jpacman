plugins {
    id 'application'
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id 'com.github.spotbugs' version '5.0.14' // Updated version
    id "org.sonarqube" version "6.0.1.5171"
}

sourceSets {
    defaultTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/default-test/java')
        }
        resources.srcDir file('src/default-test/resources')
    }
}

configurations {
    defaultTestCompile.extendsFrom testCompile
    defaultTestImplementation.extendsFrom testImplementation
    defaultTestRuntime.extendsFrom testRuntime
}

repositories {
    mavenCentral()
}

//dependencies {
//    // https://mvnrepository.com/artifact/com.google.guava/guava
//    implementation group: 'com.google.guava', name: 'guava', version: '33.4.0-jre'
//
////    compile "com.google.guava:guava:$guavaVersion"
//
//
//    compileOnly "com.github.spotbugs:spotbugs-annotations:$spotbugsAnnotationsVersion"
//
//    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
//    testCompile "org.mockito:mockito-core:$mockitoVersion"
//    testCompile "org.assertj:assertj-core:$assertjVersion"
//}
dependencies {
    implementation 'com.google.guava:guava:33.4.0-jre'
    implementation 'com.github.spotbugs:spotbugs:4.9.0'
    compileOnly "com.github.spotbugs:spotbugs-annotations:$spotbugsAnnotationsVersion"
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
}

tasks.register('defaultTest', Test) {
    testClassesDirs = sourceSets.defaultTest.output.classesDirs
    classpath = sourceSets.defaultTest.runtimeClasspath
}
test.dependsOn defaultTest

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

defaultTest {
    useJUnitPlatform()
}

jacoco {
    toolVersion = jacocoVersion
}

jacocoTestReport {
    executionData tasks.withType(Test)
    reports {
        csv.required.set(true)
        xml.required.set(true)
    }
}

checkstyle {
    configFile file("checkstyle.xml")
    ignoreFailures = true
}

pmd {
    ruleSetFiles "pmd-rules.xml"
    ruleSets = []
}

//tasks.withType(com.github.spotbugs) {
//    reports {
//        xml.required.set(true)
//        html.required.set(true)
//    }
//}

// https://github.com/spotbugs/spotbugs-gradle-plugin
tasks.spotbugsMain {
    reports.create('html') {
        required = true
        outputLocation = file("build/reports/spotbugs.html")
    }
}

tasks.register('staticAnalysis', GradleBuild) {
    tasks = [
            'clean',
            'checkstyleMain',
            'checkstyleTest',
            'checkstyleDefaultTest',
            'pmdMain',
            'pmdTest',
            'pmdDefaultTest',
            'spotbugsMain',
            'spotbugsTest',
            'spotbugsDefaultTest',
    ]
}

mainClassName = 'nl.tudelft.jpacman.Launcher'
